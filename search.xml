<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>http://yoursite.com/2016/05/22/ex1/</url>
      <content type="html"><![CDATA[<hr>
<p>title: 从一个实例简单学习RecyclerView基础应用<br>date: 2016-05-22 17:19:22<br>tags:</p>
<ul>
<li>安卓<br>categories:</li>
<li>安卓</li>
</ul>
<hr>
<h1 id="实例简介"><a href="#实例简介" class="headerlink" title="实例简介"></a>实例简介</h1><ul>
<li>每日对【听力特快】中空中英语教室和CNN学生新闻视频栏目的音频文件下载，同时包括对CNN学生新闻视频的字幕抓取</li>
<li>RecyclerView+CardView进行布局展示</li>
<li>AsyncTask和Jsoup进行异步网络下载音频和字幕抓取</li>
<li>MediaPlay 进行判断本地是否有音频，若有则本地播放，若无则进行预加载播放</li>
<li><p>AppCompatSeekBar 进度控制</p>
<h1 id="RcyclerView简述"><a href="#RcyclerView简述" class="headerlink" title="RcyclerView简述"></a>RcyclerView简述</h1><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2></li>
<li><p>LayoutManager: 管理RecyclerView的结构.</p>
</li>
<li><p>Adapter: 处理每个Item的显示.</p>
</li>
<li>ItemDecoration: 添加每个Item的装饰.</li>
<li><p>ItemAnimator: 负责添加\移除\重排序时的动画效果.</p>
<pre><code>mRecyclerView = findView(R.id.recyclerView);
</code></pre><p><span class="hljs-comment">//设置布局管理器</span><br>mRecyclerView.setLayoutManager(layout);<br><span class="hljs-comment">//设置adapter</span><br>mRecyclerView.setAdapter(adapter)<br><span class="hljs-comment">//设置Item增加、移除动画</span><br>mRecyclerView.setItemAnimator(<span class="hljs-keyword">new</span> DefaultItemAnimator());<br><span class="hljs-comment">//添加分割线</span><br>mRecyclerView.addItemDecoration(<span class="hljs-keyword">new</span> DividerItemDecoration(</p>
<pre><code>getActivity(), DividerItemDecoration.HORIZONTAL_LIST));
</code></pre><p>`</p>
<h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><p><pre><code>LinearLayoutManager llm = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; LinearLayoutManager(MainActivity.&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;);
recyclerView.setLayoutManager(llm);
recyclerView.setHasFixedSize(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;);
recyclerView.setAdapter(adapter);
&lt;span class=&quot;hljs-keyword&quot;&gt;int&lt;/span&gt; spacingInPixels = getResources().getDimensionPixelSize(R.dimen.space);
recyclerView.addItemDecoration(&lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; SpaceItemDecoration(spacingInPixels)); &lt;span class=&quot;hljs-comment&quot;&gt;//设置分割线&lt;/span&gt;</code></pre></p>
<h3 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h3></li>
<li>RecyclerView提供这些内置的布局管理器：</li>
<li>LinearLayoutManager 显示在垂直或水平滚动列表项。</li>
<li>GridLayoutManager 显示在网格中的项目。</li>
<li>StaggeredGridLayoutManager 显示了交错网格项目。</li>
<li><p>要创建自定义布局管理器，扩展RecyclerView.LayoutManager类。</p>
<h3 id="自定义分割线"><a href="#自定义分割线" class="headerlink" title="自定义分割线"></a>自定义分割线</h3><pre>` <span class="hljs-comment">// 分隔间距 继承RecyclerView.ItemDecoration</span>
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpaceItemDecoration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecyclerView</span>.<span class="hljs-title">ItemDecoration</span> </span>{
        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> space;
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SpaceItemDecoration</span><span class="hljs-params">(<span class="hljs-keyword">int</span> space)</span> </span>{
            <span class="hljs-keyword">this</span>.space = space;
        }
        <span class="hljs-annotation">@Override</span>
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getItemOffsets</span><span class="hljs-params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>{
<span class="hljs-comment">//            super.getItemOffsets(outRect, view, parent, state);</span>
            <span class="hljs-keyword">if</span> (parent.getChildAdapterPosition(view) != <span class="hljs-number">0</span>) {
                outRect.top = space;
            }
        }
    }
`</pre>

<p>写好继承自RecyclerView.ItemDecoration的类，即可自定义间隔距离。</p>
<pre>`<span class="hljs-built_in">int</span> spacingInPixels = getResources().getDimensionPixelSize(R.dimen.<span class="hljs-built_in">space</span>);
recyclerView.addItemDecoration(<span class="hljs-keyword">new</span> SpaceItemDecoration(spacingInPixels));
`</pre>

<h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p>适配器, 处理RecyclerView的Item事务.</p>
<pre>`<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RecyclerViewAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RecyclerView</span>.<span class="hljs-title">Adapter</span><<span class="hljs-title">RecyclerViewAdapter</span>.<span class="hljs-title">InfosViewHolder</span>> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String TAG = <span class="hljs-string">"RecyclerViewAdapter"</span>;
    <span class="hljs-keyword">private</span> List<infos> infos;
    <span class="hljs-keyword">private</span> Context context;
    <span class="hljs-keyword">private</span> String[] url = <span class="hljs-keyword">new</span> String[<span class="hljs-number">2</span>];
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> progress;
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RecyclerViewAdapter</span><span class="hljs-params">(List<infos> infos, Context context)</infos></span> </span>{
        <span class="hljs-keyword">this</span>.infos = infos;
        <span class="hljs-keyword">this</span>.context = context;
    }
    <span class="hljs-annotation">@Override</span>
    <span class="hljs-keyword">public</span> RecyclerViewAdapter.<span class="hljs-function">InfosViewHolder <span class="hljs-title">onCreateViewHolder</span><span class="hljs-params">(ViewGroup viewGroup, <span class="hljs-keyword">int</span> i)</span> </span>{
        View v = LayoutInflater.from(context).inflate(R.layout.cardview_item, viewGroup, <span class="hljs-keyword">false</span>);
        InfosViewHolder nvh = <span class="hljs-keyword">new</span> InfosViewHolder(v);
        <span class="hljs-keyword">return</span> nvh;
    }
    <span class="hljs-annotation">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onBindViewHolder</span><span class="hljs-params">(<span class="hljs-keyword">final</span> RecyclerViewAdapter.InfosViewHolder personViewHolder, <span class="hljs-keyword">int</span> i)</span> </span>{
        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> j = i;
      personViewHolder.news_photo.setImageResource(infos.get(i).getPhotoId());
        personViewHolder.news_title.setText(infos.get(i).getTitle());
        personViewHolder.news_desc.setText(infos.get(i).getDesc());
        url[i] = infos.get(i).getUrl();
        <span class="hljs-comment">//cardView arrowbutton设置点击事件</span>
        personViewHolder.cardView.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() {
            <span class="hljs-annotation">@Override</span>
            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>{
                Intent intent = <span class="hljs-keyword">new</span> Intent(context, InfosActivity.class);
                intent.putExtra(<span class="hljs-string">"Infos"</span>, infos.get(j));
                context.startActivity(intent);
                Log.d(TAG, <span class="hljs-string">"this is "</span> + j);
            }
        });
      personViewHolder.arrowButton.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener() {
            <span class="hljs-annotation">@Override</span>
            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span> </span>{
                personViewHolder.arrowButton.startAnimating();
<span class="hljs-comment">//               这里因为viewHolder是final 从第一栏加载 所以最后的数据是最好一栏的数据 解决方案就是将viewHolder需要做事件的控件传入</span>
                DownloadTask downloadTask = <span class="hljs-keyword">new</span> DownloadTask(context, infos.get(j).getTitle(), personViewHolder.arrowButton);
                downloadTask.execute(url[j]);
                Log.d(TAG, url[j]);
            }
        });
`</infos></pre>

<h4 id="关键方法意义"><a href="#关键方法意义" class="headerlink" title="关键方法意义"></a>关键方法意义</h4><blockquote>
<p>onCreateViewHolder创建ViewHolder.</p>
<pre><code>onBindViewHolder绑定每一项数据.

getItemCount返回列表长度.
</code></pre></blockquote>
<h4 id="RecyclerView强制使用ViewHolder"><a href="#RecyclerView强制使用ViewHolder" class="headerlink" title="RecyclerView强制使用ViewHolder."></a>RecyclerView强制使用ViewHolder.</h4><p><pre>`<span class="hljs-comment">//自定义ViewHolder类 进行视图绑定</span><br>static <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfosViewHolder</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span></span> <span class="hljs-title">RecyclerView</span>.<span class="hljs-title">ViewHolder</span> {</span></pre></p>
<pre><code>&lt;span class=&quot;hljs-annotation&quot;&gt;@Bind&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.cardView)
&lt;span class=&quot;hljs-type&quot;&gt;CardView&lt;/span&gt; cardView;
&lt;span class=&quot;hljs-annotation&quot;&gt;@Bind&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.news_photo)
&lt;span class=&quot;hljs-type&quot;&gt;ImageView&lt;/span&gt; news_photo;
&lt;span class=&quot;hljs-annotation&quot;&gt;@Bind&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.news_title)
&lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt; news_title;
&lt;span class=&quot;hljs-annotation&quot;&gt;@Bind&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.news_desc)
&lt;span class=&quot;hljs-type&quot;&gt;TextView&lt;/span&gt; news_desc;
&lt;span class=&quot;hljs-annotation&quot;&gt;@Bind&lt;/span&gt;(&lt;span class=&quot;hljs-type&quot;&gt;R&lt;/span&gt;.id.arrow_button)
&lt;span class=&quot;hljs-type&quot;&gt;ArrowDownloadButton&lt;/span&gt; arrowButton;
public &lt;span class=&quot;hljs-type&quot;&gt;InfosViewHolder&lt;/span&gt;(&lt;span class=&quot;hljs-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;hljs-type&quot;&gt;View&lt;/span&gt; itemView) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;super&lt;/span&gt;(itemView);        
    &lt;span class=&quot;hljs-type&quot;&gt;ButterKnife&lt;/span&gt;.bind(&lt;span class=&quot;hljs-keyword&quot;&gt;this&lt;/span&gt;, itemView);
    &lt;span class=&quot;hljs-comment&quot;&gt;//设置TextView背景为半透明&lt;/span&gt;
    news_title.setBackgroundColor(&lt;span class=&quot;hljs-type&quot;&gt;Color&lt;/span&gt;.argb(&lt;span class=&quot;hljs-number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;));
}
</code></pre><p>}<br>`&gt; 在onCreateViewHolder方法, 创建类; 在onBindViewHolder方法, 绑定数据.</p>
<h4 id="遇到的小问题"><a href="#遇到的小问题" class="headerlink" title="遇到的小问题"></a>遇到的小问题</h4><p>ViewHolder加载视图的顺序是从第一个Item到最后一个，而且该对象是final类型，故自己最初在DownloadTask exntend AsyncTask&lt;&gt; 该类写 ViewHolder.arrowButton.setProgress 只有最后一个Item才会有下载的动画显示（setProgress生效）,但下载是没有问题的。</p>
<p>解决方案则是将该Button在new DownloadTask的时候传入。</p>
<p>问题解决。</p>
<h4 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h4><p>RecyclerView的更新自己目前用到的还是adapter.notifyDataSetChanged</p>
<h3 id="新手Tips"><a href="#新手Tips" class="headerlink" title="新手Tips"></a>新手Tips</h3></li>
<li><p>implements Serializable 的范类才可以进行Intent传送<pre>`<span class="hljs-title">Intent</span> intent = getIntent();<br><span class="hljs-title">Infos</span> item = (Infos) intent.getSerializableExtra(<span class="hljs-string">“Infos”</span>);</pre></p>
</li>
<li><p>理解ViewHolder的加载模式</p>
</li>
<li><p>Handler灵活应用</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/05/21/hello-world/</url>
      <content type="html"><![CDATA[<p>你好！！！第一篇博客从这里开始</p>
<center> <iframe name="iframe_canvas" src="http://douban.fm/partner/baidu/doubanradio" scrolling="no" frameborder="0" width="400" height="200"></iframe> </center>]]></content>
    </entry>
    
  
  
</search>
